! 
! Motif
!
! Copyright (c) 1987-2012, The Open Group. All rights reserved.
!
! These libraries and programs are free software; you can
! redistribute them and/or modify them under the terms of the GNU
! Lesser General Public License as published by the Free Software
! Foundation; either version 2 of the License, or (at your option)
! any later version.
!
! These libraries and programs are distributed in the hope that
! they will be useful, but WITHOUT ANY WARRANTY; without even the
! implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
! PURPOSE. See the GNU Lesser General Public License for more
! details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with these librararies and programs; if not, write
! to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
! Floor, Boston, MA 02110-1301 USA
! 
! 
! HISTORY
! 
!   $XConsortium: periodic.uil /main/8 1996/11/08 15:41:22 drk $
!******************************************************************************

!*****************************************************************
!*
!*   Author: Alastair Gourlay
!*   Date: April 1992
!*   Author: Michael K. Yee
!*   Date: August 1990
!*
!*****************************************************************


module periodic 
    version = 'v2.0'
    names = case_sensitive
    character_set=iso_latin1
    objects = {
	XmLabel = widget;
	XmPushButton = widget;
	XmToggleButton = widget;
	XmCascadeButton = widget;
	XmSeparator = widget;
    }

include file ("periodic_l.uil");

procedure
	ManageCb();
	UnmanageCb(string);
	ShowCb(string);
	InitPopupCb(string);
	PopdownCb();
	DaExposeCb();
	DaResizeCb();
	DbExposeCb();
	DbResizeCb();
	ScaleCb();
	SetScaleCb(integer);
	ViewCb();
	LayoutCb();
	ToggleLightsCb();
	ExitCb();
	ScrollVisibleCb();
	ToggleControlCb(integer);
	ToggleValueChangedCb();

value
	x0 : 0;
	x1 : 5;
	x2 : 10;
	x3 : 15;
	x4 : 20;
	x5 : 25;
	x6 : 30;
	x7 : 35;
	x8 : 40;

	y0 : 0;
	y1 : 8;
	y2 : 16;
	y3 : 24;
	y4 : 32;
	y5 : 40;

value
	boxMarginWidth : 5;
	boxMarginHeight : 5;

value
	XmDEFAULT_SELECT_COLOR : color("XmDEFAULT_SELECT_COLOR");

list formArgs : arguments {
	XmNleftAttachment = XmATTACH_POSITION;
	XmNrightAttachment = XmATTACH_POSITION;
	XmNtopAttachment = XmATTACH_POSITION;
	XmNbottomAttachment = XmATTACH_POSITION;
};

list titleArgs : arguments {
	XmNframeChildType = XmFRAME_TITLE_CHILD;
	XmNchildHorizontalSpacing = 4;
	XmNchildVerticalAlignment = XmALIGNMENT_WIDGET_BOTTOM;
};




!
! Main window
!
object appMain : XmMainWindow {
    arguments {
	XmNmenuBar = XmMenuBar menuBar;
    };
    controls {
	XmMenuBar menuBar;
	XmFrame {
	    arguments {
		XmNmarginWidth = 20;
		XmNmarginHeight = 20;
	    };
	    controls { XmForm workArea; };
	};
	unmanaged XmFileSelectionDialog fileDialog;
	unmanaged XmSelectionDialog selectDialog;
	unmanaged XmTemplateDialog templateDialog;
	unmanaged XmInformationDialog infoDialog;
	unmanaged XmWarningDialog warningDialog;
	unmanaged XmErrorDialog errorDialog;
	unmanaged XmQuestionDialog questionDialog;
	unmanaged XmWorkingDialog workingDialog;
	unmanaged XmPromptDialog promptDialog;
	unmanaged XmInformationDialog showDialog;
    };
};




!
! Menu bar and pulldown menus
!

object menuBar : XmMenuBar {
    arguments {
	XmNmenuHelpWidget = XmCascadeButton helpCascade;
    };
    controls {
	XmCascadeButton fileCascade;
	XmCascadeButton editCascade;
	XmCascadeButton viewCascade;
	XmCascadeButton optionsCascade;
	XmCascadeButton helpCascade;
    };
};

object fileCascade : XmCascadeButton {
    arguments {
	XmNlabelString = fileCascadeText;
	XmNmnemonic = keysym(fileCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton newButton;
	    XmPushButton openButton;
	    XmPushButton saveButton;
	    XmPushButton saveAsButton;
	    XmPushButton printButton;
	    XmPushButton exitButton;
	}; };
    };
};

object newButton : XmPushButton {
    arguments {
	XmNlabelString = newButtonText;
	XmNmnemonic = keysym(newButtonMnem);
    };
};
object openButton : XmPushButton {
    arguments {
	XmNlabelString = openButtonText;
	XmNmnemonic = keysym(openButtonMnem);
    };
};
object saveButton : XmPushButton {
    arguments {
	XmNlabelString = saveButtonText;
	XmNmnemonic = keysym(saveButtonMnem);
    };
};
object saveAsButton : XmPushButton {
    arguments {
	XmNlabelString = saveAsButtonText;
	XmNmnemonic = keysym(saveAsButtonMnem);
    };
};
object printButton : XmPushButton {
    arguments {
	XmNlabelString = printButtonText;
	XmNmnemonic = keysym(printButtonMnem);
    };
};
object exitButton : XmPushButton {
    arguments {
	XmNlabelString = exitButtonText;
	XmNmnemonic = keysym(exitButtonMnem);
    };
    callbacks { XmNactivateCallback = procedure ExitCb(); };
};

object editCascade : XmCascadeButton {
    arguments {
	XmNlabelString = editCascadeText;
	XmNmnemonic = keysym(editCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton undoButton;
	    XmSeparator { };
	    XmPushButton cutButton;
	    XmPushButton copyButton;
	    XmPushButton pasteButton;
	    XmSeparator { };
	    XmPushButton clearButton;
	    XmPushButton deleteButton;
	}; };
    };
};

object undoButton : XmPushButton {
    arguments {
	XmNlabelString = undoButtonText;
	XmNmnemonic = keysym(undoButtonMnem);
    };
};
object cutButton : XmPushButton {
    arguments {
	XmNlabelString = cutButtonText;
	XmNmnemonic = keysym(cutButtonMnem);
    };
};
object copyButton : XmPushButton {
    arguments {
	XmNlabelString = copyButtonText;
	XmNmnemonic = keysym(copyButtonMnem);
    };
};
object pasteButton : XmPushButton {
    arguments {
	XmNlabelString = pasteButtonText;
	XmNmnemonic = keysym(pasteButtonMnem);
    };
};
object clearButton : XmPushButton {
    arguments {
	XmNlabelString = clearButtonText;
	XmNmnemonic = keysym(clearButtonMnem);
    };
};
object deleteButton : XmPushButton {
    arguments {
	XmNlabelString = deleteButtonText;
	XmNmnemonic = keysym(deleteButtonMnem);
    };
};

object viewCascade : XmCascadeButton {
    arguments {
	XmNlabelString = viewCascadeText;
	XmNmnemonic = keysym(viewCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmToggleButton stackButton;
	    XmToggleButton tileButton;
	    XmSeparator { };
	    XmToggleButton dayButton;
	    XmToggleButton weekButton;
	    XmToggleButton monthButton;
	    XmToggleButton yearButton;
	}; };
    };
};

object stackButton : XmToggleButton {
    arguments {
	XmNlabelString = stackButtonText;
	XmNmnemonic = keysym(stackButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure LayoutCb(); };
};
object tileButton : XmToggleButton {
    arguments {
	XmNlabelString = tileButtonText;
	XmNmnemonic = keysym(tileButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure LayoutCb(); };
};
object dayButton : XmToggleButton {
    arguments {
	XmNlabelString = dayButtonText;
	XmNmnemonic = keysym(dayButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure ViewCb(); };
};
object weekButton : XmToggleButton {
    arguments {
	XmNlabelString = weekButtonText;
	XmNmnemonic = keysym(weekButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure ViewCb(); };
};
object monthButton : XmToggleButton {
    arguments {
	XmNlabelString = monthButtonText;
	XmNmnemonic = keysym(monthButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure ViewCb(); };
};
object yearButton : XmToggleButton {
    arguments {
	XmNlabelString = yearButtonText;
	XmNmnemonic = keysym(yearButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure ViewCb(); };
};

object optionsCascade : XmCascadeButton {
    arguments {
	XmNlabelString = optionsCascadeText;
	XmNmnemonic = keysym(optionsCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmCascadeButton fontCascade;
	    XmCascadeButton directCascade;
	    XmToggleButton caseButton;
	    XmToggleButton wrapButton;
	}; };
    };
};

object fontCascade : XmCascadeButton {
    arguments {
	XmNlabelString = fontCascadeText;
	XmNmnemonic = keysym(fontCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton smallFontButton;
	    XmPushButton mediumFontButton;
	    XmPushButton largeFontButton;
	}; };
    };
};

object smallFontButton : XmPushButton {
    arguments {
	XmNlabelString = smallFontButtonText;
	XmNmnemonic = keysym(smallFontButtonMnem);
    };
};
object mediumFontButton : XmPushButton {
    arguments {
	XmNlabelString = mediumFontButtonText;
	XmNmnemonic = keysym(mediumFontButtonMnem);
    };
};
object largeFontButton : XmPushButton {
    arguments {
	XmNlabelString = largeFontButtonText;
	XmNmnemonic = keysym(largeFontButtonMnem);
    };
};

object directCascade : XmCascadeButton {
    arguments {
	XmNlabelString = directCascadeText;
	XmNmnemonic = keysym(directCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton upDirButton;
	    XmPushButton downDirButton;
	    XmPushButton leftDirButton;
	    XmPushButton rightDirButton;
	}; };
    };
};

object upDirButton : XmPushButton {
    arguments {
	XmNlabelString = upButtonText;
	XmNmnemonic = keysym(upButtonMnem);
    };
};
object downDirButton : XmPushButton {
    arguments {
	XmNlabelString = downButtonText;
	XmNmnemonic = keysym(downButtonMnem);
    };
};
object leftDirButton : XmPushButton {
    arguments {
	XmNlabelString = leftButtonText;
	XmNmnemonic = keysym(leftButtonMnem);
    };
};
object rightDirButton : XmPushButton {
    arguments {
	XmNlabelString = rightButtonText;
	XmNmnemonic = keysym(rightButtonMnem);
    };
};
object caseButton : XmToggleButton {
    arguments {
	XmNlabelString = caseButtonText;
	XmNmnemonic = keysym(caseButtonMnem);
    };
};
object wrapButton : XmToggleButton {
    arguments {
	XmNlabelString = wrapButtonText;
	XmNmnemonic = keysym(wrapButtonMnem);
    };
};

object helpCascade : XmCascadeButton {
    arguments {
	XmNlabelString = helpCascadeText;
	XmNmnemonic = keysym(helpCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton contextButton;
	    XmPushButton windowButton;
	    XmPushButton tutorButton;
	    XmPushButton versionButton;
	}; };
    };
};

object contextButton : XmPushButton {
    arguments {
	XmNlabelString = contextButtonText;
	XmNmnemonic = keysym(contextButtonMnem);
    };
};
object windowButton : XmPushButton {
    arguments {
	XmNlabelString = windowButtonText;
	XmNmnemonic = keysym(windowButtonMnem);
    };
};
object tutorButton : XmPushButton {
    arguments {
	XmNlabelString = tutorButtonText;
	XmNmnemonic = keysym(tutorButtonMnem);
    };
};
object versionButton : XmPushButton {
    arguments {
	XmNlabelString = versionButtonText;
	XmNmnemonic = keysym(versionButtonMnem);
    };
};




!
! Work area widgets
!

object workArea : XmForm {
    arguments {
	XmNfractionBase = 40;
    };
    controls {
	XmLabel titleLabel;
	XmLabel subtitleLabel;
	XmFrame separatorFrame;
	XmFrame arrowFrame;
	XmFrame pushFrame;
	XmFrame toggleFrame;
	XmFrame labelFrame;
	XmFrame optionFrame;
	XmFrame scaleFrame;
	XmFrame radioFrame;
	XmFrame textFrame;
	XmFrame commandFrame;
	XmFrame notebookFrame;
	XmFrame scrollFrame;
	XmFrame listFrame;
	XmFrame paneFrame;
	XmFrame popupFrame;
	XmFrame drawFrame;
	XmFrame drawBtnFrame;
	XmFrame spinBoxFrame;
	XmFrame comboBoxFrame;
    };
};

object titleLabel : XmLabel {
    arguments {
	XmNleftAttachment = XmATTACH_POSITION;
	XmNrightAttachment = XmATTACH_POSITION;
	XmNleftPosition = x1; XmNrightPosition = x7;
	XmNtopAttachment = XmATTACH_FORM;
	XmNlabelString = titleLabelText;
    };
};
object subtitleLabel : XmLabel {
    arguments {
	XmNleftAttachment = XmATTACH_POSITION;
	XmNrightAttachment = XmATTACH_POSITION;
	XmNleftPosition = x1; XmNrightPosition = x7;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel titleLabel;
	XmNlabelString = subtitleLabelText;
    };
};

object separatorFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x1;
	XmNtopPosition = y0; XmNbottomPosition = y1;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginWidth;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = separatorFrameText;
	}; }; 
	XmSeparator { };
    };
};

object arrowFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x1;
	XmNtopPosition = y1; XmNbottomPosition = y2;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginWidth;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = arrowFrameText;
	}; }; 
	XmForm {
	    arguments {
		XmNfractionBase = 3;
	    };
	    controls {
		XmArrowButton arrowB1;
		XmArrowButton arrowB2;
		XmArrowButton arrowB3;
		XmArrowButton arrowB4;
	    };
	};
    };
};

object arrowB1 : XmArrowButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 0; XmNrightPosition = 1;
	XmNtopPosition = 1; XmNbottomPosition = 2;
	XmNarrowDirection = XmARROW_LEFT;
	XmNshadowThickness = 0;
    };
};
object arrowB2 : XmArrowButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 2; XmNrightPosition = 3;
	XmNtopPosition = 1; XmNbottomPosition = 2;
	XmNarrowDirection = XmARROW_RIGHT;
	XmNshadowThickness = 0;
    };
};
object arrowB3 : XmArrowButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 1; XmNrightPosition = 2;
	XmNtopPosition = 0; XmNbottomPosition = 1;
	XmNarrowDirection = XmARROW_UP;
	XmNshadowThickness = 0;
    };
};
object arrowB4 : XmArrowButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 1; XmNrightPosition = 2;
	XmNtopPosition = 2; XmNbottomPosition = 3;
	XmNarrowDirection = XmARROW_DOWN;
	XmNshadowThickness = 0;
    };
};

object pushFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x1; XmNrightPosition = x2;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginWidth;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = pushFrameText;
	}; }; 
	XmForm {
	    controls {
		XmPushButton { arguments {
		    XmNleftAttachment = XmATTACH_FORM;
		    XmNrightAttachment = XmATTACH_FORM;
		    XmNtopAttachment = XmATTACH_POSITION;
		    XmNtopPosition = 10;
		    XmNbottomAttachment = XmATTACH_POSITION;
		    XmNbottomPosition = 90;
		    XmNlabelString = pushButtonText;
		}; };
	    };
	};
    };
};

object toggleFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x1; XmNrightPosition = x2;
	XmNtopPosition = y1; XmNbottomPosition = y2;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginWidth;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = toggleFrameText;
	}; }; 
	XmForm { controls { XmToggleButton toggleButton; }; };
    };
};

object toggleButton : XmToggleButton {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_POSITION;
	XmNtopPosition = 10;
	XmNbottomAttachment = XmATTACH_POSITION;
	XmNbottomPosition = 90;
	XmNlabelString = toggleButtonText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ToggleLightsCb();
    };
};

object labelFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x1;
	XmNtopPosition = y2; XmNbottomPosition = y3;
    };
    controls {
	XmLabel { arguments {
	    arguments titleArgs;
	    XmNlabelString = labelFrameText;
	}; };
	XmForm { controls { XmLabel labelLabel; }; };
    };
};

object labelLabel : XmLabel {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNlabelString = labelText;
    };
};
 
object optionFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x7; XmNrightPosition = x8;
	XmNtopPosition = y2; XmNbottomPosition = y3;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = optionFrameText;
	}; };
	XmOptionMenu {
	    arguments {
		XmNlabelString = optionMenuText;
		XmNorientation = XmVERTICAL;
		XmNmnemonic = keysym(optionMenuMnem);
	    };
	    controls {
		XmPulldownMenu {
		    arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
		    controls {
			XmPushButton { arguments {
			    XmNlabelString = sundayButtonText;
			    XmNmnemonic = keysym(sundayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = mondayButtonText;
			    XmNmnemonic = keysym(mondayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = tuesdayButtonText;
			    XmNmnemonic = keysym(tuesdayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = wednesdayButtonText;
			    XmNmnemonic = keysym(wednesdayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = thursdayButtonText;
			    XmNmnemonic = keysym(thursdayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = fridayButtonText;
			    XmNmnemonic = keysym(fridayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = saturdayButtonText;
			    XmNmnemonic = keysym(saturdayButtonMnem);
			}; };
		    };
		};
	    };
	};
    };
};

object scaleFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x7;
	XmNtopPosition = y1; XmNbottomPosition = y2;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = scaleFrameText;
	}; };
	XmForm { controls { XmScale valueScale; }; };
    };
};

object valueScale : XmScale {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_POSITION;
	XmNtopPosition = 15;
	XmNshowValue = true;
	XmNminimum = scaleMinimum;
	XmNmaximum = scaleMaximum;
	XmNvalue = scaleValue;
	XmNdecimalPoints = 1;
	XmNtitleString = scaleTitleText;
	XmNorientation = XmHORIZONTAL;
    };
    callbacks {
	XmNdragCallback = procedure ScaleCb();
	XmNvalueChangedCallback = procedure ScaleCb();
    };
};

object radioFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x7; XmNrightPosition = x8;
	XmNtopPosition = y1; XmNbottomPosition = y2;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = radioFrameText;
	}; }; 
	XmRadioBox { 
	    arguments { XmNradioAlwaysOne = true; XmNspacing = 0; };
	    controls {
		XmToggleButton {
		    arguments {
			XmNlabelString = radio1Text; XmNset = true;
		    };
		    callbacks { XmNvalueChangedCallback = procedure
				SetScaleCb(radio1Value);
		    };
		};
		XmToggleButton {
		    arguments { XmNlabelString = radio2Text; };
		    callbacks { XmNvalueChangedCallback = procedure
				SetScaleCb(radio2Value);
		    };
		};
		XmToggleButton {
		    arguments { XmNlabelString = radio3Text; };
		    callbacks { XmNvalueChangedCallback = procedure
				SetScaleCb(radio3Value);
		    };
		};
	    };
	};
    };
};

object textFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x5;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = textFrameText;
	}; }; 
	XmText { arguments {
	    XmNeditMode = XmMULTI_LINE_EDIT;
	}; };
    };
};

object scrollFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x3; XmNrightPosition = x4;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = scrollFrameText;
	}; }; 
	XmForm {
	    controls {
		XmScrollBar { arguments {
		    XmNleftAttachment = XmATTACH_FORM;
		    XmNrightAttachment = XmATTACH_FORM;
		    XmNbottomAttachment = XmATTACH_POSITION;
		    XmNbottomPosition = 50;
		    XmNtraversalOn = true;
		    XmNhighlightThickness = 2;
		    XmNorientation = XmHORIZONTAL;
		}; };
	    };
	};
    };
};

object listFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x5; XmNrightPosition = x6;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = listFrameText;
	}; }; 
	XmScrolledList { arguments {
	    XmNitems = greekAlphabet;
	}; };
    };
};

object comboBoxFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x7;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = comboBoxFrameText;
	}; }; 
	XmForm {
	    controls {
		XmComboBox { 
		    arguments {
			XmNpositionMode = XmONE_BASED;
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_POSITION;
			XmNbottomPosition = 50;
			XmNbottomOffset = -1 font_unit;
			XmNcomboBoxType = XmDROP_DOWN_LIST;
			XmNselectedItem = hebrewAText;
		    };
		    controls {
			Xm_List { arguments {
			    XmNitems = hebrewAlphabet;
			    XmNvisibleItemCount = 6;
			}; };
		    };
		};
	    };
	};
    };
};

object paneFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x8;
	XmNtopPosition = y3; XmNbottomPosition = y5;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = paneFrameText;
	}; }; 
	XmPanedWindow { controls {
	    XmScrolledText { arguments {
		XmNvalue = pane1Text;
		XmNeditMode = XmMULTI_LINE_EDIT;
	    }; };
	    XmScrolledText { arguments {
		XmNvalue = pane2Text;
		XmNeditMode = XmMULTI_LINE_EDIT;
	    }; };
	}; };
    };
};

object popupFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x7; XmNrightPosition = x8;
	XmNtopPosition = y0; XmNbottomPosition = y1;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = popupFrameText;
	}; };
	XmForm { controls { XmLabel popupWindow; }; };
    };
};

object popupWindow : XmLabel {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNborderWidth = 1;
	XmNlabelString = popupWindowText;
	XmNtraversalOn = true;
    };
    controls { unmanaged XmPopupMenu popupMenu; };
};

object popupMenu : XmPopupMenu {
    arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
    controls {
	XmLabel { arguments { XmNlabelString = popupTitleText; }; };
	XmSeparator { arguments { XmNseparatorType = XmDOUBLE_LINE; }; };
	XmPushButton {
	    arguments {
		XmNlabelString = popupUndoText;
		XmNmnemonic = keysym(popupUndoMnem);
	    };
	};
	XmSeparator { };
	XmPushButton {
	    arguments {
		XmNlabelString = popupCutText;
		XmNmnemonic = keysym(popupCutMnem);
	    };
	};
	XmPushButton {
	    arguments {
		XmNlabelString = popupCopyText;
		XmNmnemonic = keysym(popupCopyMnem);
	    };
	};
	XmPushButton {
	    arguments {
		XmNlabelString = popupPasteText;
		XmNmnemonic = keysym(popupPasteMnem);
	    };
	};
	XmSeparator { };
	XmPushButton {
	    arguments {
		XmNlabelString = popupClearText;
		XmNmnemonic = keysym(popupClearMnem);
	    };
	};
	XmPushButton {
	    arguments {
		XmNlabelString = popupDeleteText;
		XmNmnemonic = keysym(popupDeleteMnem);
	    };
	};
    };
    callbacks {
	MrmNcreateCallback = procedure InitPopupCb("*popupWindow");
	XmNpopdownCallback = procedure PopdownCb();
    };
};

object drawFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x5; XmNrightPosition = x6;
	XmNtopPosition = y1; XmNbottomPosition = y2;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = drawFrameText;
	}; };
	XmFrame {
	    arguments {
		XmNshadowType = XmSHADOW_IN;
		XmNshadowThickness = 2;
	    };
	    controls { XmDrawingArea drawArea; };
	};
    };
};

object drawArea : XmDrawingArea {
    arguments {
	XmNtraversalOn = false;
    };
    callbacks {
	XmNexposeCallback = procedure DaExposeCb();
	XmNresizeCallback = procedure DaResizeCb();
    };
};

object drawBtnFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x3;
	XmNtopPosition = y1; XmNbottomPosition = y2;
	XmNmarginWidth = 2 * boxMarginWidth;
	XmNmarginHeight = 2 * boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = drawBtnFrameText;
	}; }; 
	XmDrawnButton drawnButton;
    };
};

object drawnButton : XmDrawnButton {
   arguments {
	XmNpushButtonEnabled = true;
    };
    callbacks {
	XmNexposeCallback = procedure DbExposeCb();
	XmNresizeCallback = procedure DbResizeCb();
	XmNactivateCallback = procedure ShowCb("*showDialog");
    };
};

object spinBoxFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x3;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = spinBoxFrameText;
	}; }; 
	XmForm {
	    controls {
		XmSpinBox {
		    arguments {
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_POSITION;
			XmNbottomPosition = 50;
			XmNbottomOffset = -1 font_unit;
			XmNarrowLayout = XmARROWS_SPLIT;
		    };
		    controls {
			XmTextField { arguments {
			    XmNeditable = false;
			    XmNspinBoxChildType = XmSTRING;
			    XmNnumValues = 6;
			    XmNvalues = quarks;
			    XmNcolumns = 6;
			}; };
		    };
		};
	    };
	};
    };
};

object commandFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x2;
	XmNtopPosition = y3; XmNbottomPosition = y5;
    };
    controls {
	XmLabel { arguments {
	    arguments titleArgs;
	    XmNlabelString = commandFrameText;
	}; };
	XmCommand { 
	    arguments {
		XmNmarginWidth = 4;
		XmNmarginHeight = 4;
		XmNhistoryMaxItems = 20;
		XmNpromptString = commandPromptText;
	    };
	};
    };
};

object notebookFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x6;
	XmNtopPosition = y3; XmNbottomPosition = y5;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel { arguments {
	    arguments titleArgs;
	    XmNlabelString = notebookFrameText;
	}; };
	XmNotebook notebook;
    };
};

object notebook : XmNotebook {
    controls {
	XmPushButton { arguments {
	    XmNlabelString = dialogText;
	    XmNnotebookChildType = XmMAJOR_TAB;
	    XmNpageNumber = 1;	    
	}; };
        XmPushButton { arguments {
            XmNlabelString = notebookWidgetsText;
            XmNnotebookChildType = XmMAJOR_TAB;
            XmNpageNumber = 2;
        }; };
        XmPushButton { arguments {
            XmNlabelString = notebookLayoutsText;
            XmNnotebookChildType = XmMAJOR_TAB;
            XmNpageNumber = 3;
        }; };
        XmPushButton { arguments {
            XmNlabelString = togglesText;
            XmNnotebookChildType = XmMAJOR_TAB;
            XmNpageNumber = 11;
        }; };

        XmPushButton { arguments {
            XmNlabelString = aText;
            XmNnotebookChildType = XmMINOR_TAB;
            XmNpageNumber = 3;
        }; };
	XmLabel { arguments {
	    XmNnotebookChildType = XmSTATUS_AREA;
	    XmNlabelString = layoutLTText;
            XmNpageNumber = 3;
	}; };
        XmPushButton { arguments {
            XmNlabelString = bText;
            XmNnotebookChildType = XmMINOR_TAB;
            XmNpageNumber = 4;
        }; };
	XmLabel { arguments {
	    XmNnotebookChildType = XmSTATUS_AREA;
	    XmNlabelString = layoutRTText;
	    XmNpageNumber = 4;
	}; };
        XmPushButton { arguments {
            XmNlabelString = cText;
            XmNnotebookChildType = XmMINOR_TAB;
            XmNpageNumber = 5;
        }; };
	XmLabel { arguments {
	    XmNnotebookChildType = XmSTATUS_AREA;
	    XmNlabelString = layoutTLText;
	    XmNpageNumber = 5;
	}; };
        XmPushButton { arguments {
            XmNlabelString = fText;
            XmNnotebookChildType = XmMINOR_TAB;
            XmNpageNumber = 6;
        }; };
	XmLabel { arguments {
	    XmNnotebookChildType = XmSTATUS_AREA;
	    XmNlabelString = layoutTRText;
	    XmNpageNumber = 6;
	}; };
        XmPushButton { arguments {
            XmNlabelString = gText;
            XmNnotebookChildType = XmMINOR_TAB;
            XmNpageNumber = 7;
        }; };
	XmLabel { arguments {
	    XmNnotebookChildType = XmSTATUS_AREA;
	    XmNlabelString = layoutBLText;
	    XmNpageNumber = 7;
	}; };
        XmPushButton { arguments {
            XmNlabelString = jText;
            XmNnotebookChildType = XmMINOR_TAB;
            XmNpageNumber = 8;
        }; };
	XmLabel { arguments {
	    XmNnotebookChildType = XmSTATUS_AREA;
	    XmNlabelString = layoutBRText;
	    XmNpageNumber = 8;
	}; };
        XmPushButton { arguments {
            XmNlabelString = kText;
            XmNnotebookChildType = XmMINOR_TAB;
            XmNpageNumber = 9;
        }; };
	XmLabel { arguments {
	    XmNnotebookChildType = XmSTATUS_AREA;
	    XmNlabelString = layoutLBText;
	    XmNpageNumber = 9;
	}; };
        XmPushButton { arguments {
            XmNlabelString = lText;
            XmNnotebookChildType = XmMINOR_TAB;
            XmNpageNumber = 10;
        }; };
	XmLabel { arguments {
	    XmNnotebookChildType = XmSTATUS_AREA;
	    XmNlabelString = layoutRBText;
	    XmNpageNumber = 10;
	}; };

        XmContainer dialogContainer;
        XmScrolledWindow widgetTreeScrolledWin;
	XmForm layoutLTForm;
	XmForm layoutRTForm;
	XmForm layoutTLForm;
	XmForm layoutTRForm;
	XmForm layoutBLForm;
	XmForm layoutBRForm;
	XmForm layoutLBForm;
	XmForm layoutRBForm;
        XmForm toggleButtonPage;
    };
};

object dialogContainer : XmContainer {
    arguments {
	XmNnotebookChildType = XmPAGE;
	XmNpageNumber = 1;
	XmNautomaticSelection = true;
	XmNentryViewType = XmLARGE_ICON;
	XmNlayoutType = XmSPATIAL;
	XmNselectionPolicy = XmSINGLE_SELECT;
	XmNspatialSnapModel = XmCENTER;
    };
    callbacks {
	XmNdefaultActionCallback = procedure ManageCb();
    };
    controls {
	XmIconGadget templatePick;
	XmIconGadget infoPick;
	XmIconGadget warningPick;
	XmIconGadget errorPick;
	XmIconGadget questionPick;
	XmIconGadget workingPick;
	XmIconGadget filePick;
	XmIconGadget selectPick;
	XmIconGadget promptPick;
    };
};

object templatePick : XmIconGadget {
    arguments {
	XmNlabelString = templatePickText;
	XmNlargeIconPixmap = templatePixmap;
    };
};
object infoPick : XmIconGadget {
    arguments {
	XmNlabelString = infoPickText;
	XmNlargeIconPixmap = infoPixmap;
    };
};
object warningPick : XmIconGadget {
    arguments {
	XmNlabelString = warningPickText;
	XmNlargeIconPixmap = warningPixmap;
    };
};
object errorPick : XmIconGadget {
    arguments {
	XmNlabelString = errorPickText;
	XmNlargeIconPixmap = errorPixmap;
    };
};
object questionPick : XmIconGadget {
    arguments {
	XmNlabelString = questionPickText;
	XmNlargeIconPixmap = questionPixmap;
    };
};
object workingPick : XmIconGadget {
    arguments {
	XmNlabelString = workingPickText;
	XmNlargeIconPixmap = workingPixmap;
    };
};
object filePick : XmIconGadget {
    arguments {
	XmNlabelString = filePickText;
	XmNlargeIconPixmap = filePixmap;
    };
};
object selectPick : XmIconGadget {
    arguments {
	XmNlabelString = selectPickText;
	XmNlargeIconPixmap = selectPixmap;
    };
};
object promptPick : XmIconGadget {
    arguments {
	XmNlabelString = promptPickText;
	XmNlargeIconPixmap = promptPixmap;
    };
};


! Notebook Page 2

object widgetTreeScrolledWin : XmScrolledWindow {
    arguments {
        XmNnotebookChildType = XmPAGE;
        XmNpageNumber = 2;
        XmNscrollBarDisplayPolicy = XmAS_NEEDED;
        XmNscrollingPolicy = XmAUTOMATIC;
        };
    callbacks {
	XmNtraverseObscuredCallback = procedure ScrollVisibleCb();
	};
    controls {
        XmContainer widgetContainer;
    };
};

object widgetContainer : XmContainer {
    arguments {
        XmNentryViewType = XmSMALL_ICON;
        XmNautomaticSelection = true;
        XmNselectionPolicy = XmSINGLE_SELECT;
        XmNoutlineIndentation = 20;
        XmNlayoutType = XmDETAIL;
        XmNdetailColumnHeading = notebookWidgetsHeaders;
    };
    controls {
        XmIconGadget wt_Object;
        XmIconGadget wt_Rect;
        XmIconGadget wt_Core;
        XmIconGadget wt_Composite;
        XmIconGadget wt_Constraint;
        XmIconGadget wt_XmManager;
        XmIconGadget wt_XmDrawingArea;
        XmIconGadget wt_XmFrame;
        XmIconGadget wt_XmRowColumn;
        XmIconGadget wt_XmPanedWindow;
        XmIconGadget wt_XmScale;
        XmIconGadget wt_XmComboBox;
        XmIconGadget wt_XmContainer;
        XmIconGadget wt_XmNotebook;
        XmIconGadget wt_XmSpinBox;
        XmIconGadget wt_XmScrolledWindow;
        XmIconGadget wt_XmMainWindow;
        XmIconGadget wt_XmBulletinBoard;
        XmIconGadget wt_XmForm;
        XmIconGadget wt_XmMessageBox;
        XmIconGadget wt_XmSelectionBox;
        XmIconGadget wt_XmFileSelectionBox;
        XmIconGadget wt_XmCommand;
        XmIconGadget wt_Shell;
        XmIconGadget wt_WMShell;
        XmIconGadget wt_VendorShell;
        XmIconGadget wt_XmGrabShell;
        XmIconGadget wt_XmDragOverShell;
        XmIconGadget wt_TransientShell;
        XmIconGadget wt_XmDialogShell;
        XmIconGadget wt_TopLevelShell;
        XmIconGadget wt_ApplicationShell;
        XmIconGadget wt_XmDisplay;
        XmIconGadget wt_OverrideShell;
        XmIconGadget wt_XmMenuShell;
        XmIconGadget wt_XmScreen;
        XmIconGadget wt_XmDragContext;
        XmIconGadget wt_XmPrimitive;
        XmIconGadget wt_XmScrollBar;
        XmIconGadget wt_XmArrowButton;
        XmIconGadget wt_XmList;
        XmIconGadget wt_XmSeparator;
        XmIconGadget wt_XmTextField;
        XmIconGadget wt_XmDrawnButton;
        XmIconGadget wt_XmText;
        XmIconGadget wt_XmSash;
        XmIconGadget wt_XmLabel;
        XmIconGadget wt_XmToggleButton;
        XmIconGadget wt_XmCascadeButton;
        XmIconGadget wt_XmPushButton;
        XmIconGadget wt_XmTearOffButton;
        XmIconGadget wt_XmGadget;
        XmIconGadget wt_XmArrowButtonGadget;
        XmIconGadget wt_XmSeparatorGadget;
        XmIconGadget wt_XmLabelGadget;
        XmIconGadget wt_XmPushButtonGadget;
        XmIconGadget wt_XmToggleButtongadget;
        XmIconGadget wt_XmCascadeButtonGadget;
        XmIconGadget wt_XmIconGadget;
        XmIconGadget wt_XmIconHeader;
        XmIconGadget wt_XmDragIcon;
        XmIconGadget wt_XmDropTransfer;
        XmIconGadget wt_XmDropSiteManager;
    };
};

object wt_Object : XmIconGadget {
    arguments {
        XmNlabelString = wtObjectText;
        XmNoutlineState = XmEXPANDED;
        XmNdetail = wtObjectDetail;
    };
};
object wt_Rect : XmIconGadget {
    arguments {
        XmNlabelString = wtRectText;
        XmNentryParent = wt_Object;
        XmNoutlineState = XmEXPANDED;
        XmNdetail = wtRectDetail;
    };
};
object wt_Core : XmIconGadget {
    arguments {
        XmNlabelString = wtCoreText;
        XmNentryParent = wt_Rect;
        XmNoutlineState = XmEXPANDED;
        XmNdetail = wtCoreDetail;
    };
};
object wt_Composite : XmIconGadget {
    arguments {
        XmNlabelString = wtCompositeText;
        XmNentryParent = wt_Core;
        XmNoutlineState = XmEXPANDED;
        XmNdetail = wtCompositeDetail;
    };
};
object wt_Constraint : XmIconGadget {
    arguments {
        XmNlabelString = wtConstraintText;
        XmNentryParent = wt_Composite;
        XmNoutlineState = XmEXPANDED;
        XmNdetail = wtConstraintDetail;
    };
};
object wt_XmManager : XmIconGadget {
    arguments {
        XmNlabelString = wtXmManagerText;
        XmNentryParent = wt_Constraint;
        XmNdetail = wtXmManagerDetail;
    };
};
object wt_XmDrawingArea : XmIconGadget {
    arguments {
        XmNlabelString = wtXmDrawingAreaText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmDrawingAreaDetail;
    };
};
object wt_XmFrame : XmIconGadget {
    arguments {
        XmNlabelString = wtXmFrameText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmFrameDetail;
    };
};
object wt_XmRowColumn : XmIconGadget {
    arguments {
        XmNlabelString = wtXmRowColumnText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmRowColumnDetail;
    };
};
object wt_XmPanedWindow : XmIconGadget {
    arguments {
        XmNlabelString = wtXmPanedWindowText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmPanedWindowDetail;
    };
};
object wt_XmScale : XmIconGadget {
    arguments {
        XmNlabelString = wtXmScaleText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmScaleDetail;
    };
};
object wt_XmComboBox : XmIconGadget {
    arguments {
        XmNlabelString = wtXmComboBoxText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmComboBoxDetail;
    };
};
object wt_XmContainer : XmIconGadget {
    arguments {
        XmNlabelString = wtXmContainerText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmContainerDetail;
    };
};
object wt_XmNotebook : XmIconGadget {
    arguments {
        XmNlabelString = wtXmNotebookText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmNotebookDetail;
    };
};
object wt_XmSpinBox : XmIconGadget {
    arguments {
        XmNlabelString = wtXmSpinBoxText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmSpinBoxDetail;
    };
};
object wt_XmScrolledWindow : XmIconGadget {
    arguments {
        XmNlabelString = wtXmScrolledWindowText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmScrolledWindowDetail;
    };
};
object wt_XmMainWindow : XmIconGadget {
    arguments {
        XmNlabelString = wtXmMainWindowText;
        XmNentryParent = wt_XmScrolledWindow;
        XmNdetail = wtXmMainWindowDetail;
    };
};
object wt_XmBulletinBoard : XmIconGadget {
    arguments {
        XmNlabelString = wtXmBulletinBoardText;
        XmNentryParent = wt_XmManager;
        XmNdetail = wtXmBulletinBoardDetail;
    };
};
object wt_XmForm : XmIconGadget {
    arguments {
        XmNlabelString = wtXmFormText;
        XmNentryParent = wt_XmBulletinBoard;
        XmNdetail = wtXmFormDetail;
    };
};
object wt_XmMessageBox : XmIconGadget {
    arguments {
        XmNlabelString = wtXmMessageBoxText;
        XmNentryParent = wt_XmBulletinBoard;
        XmNdetail = wtXmMessageBoxDetail;
    };
};
object wt_XmSelectionBox : XmIconGadget {
    arguments {
        XmNlabelString = wtXmSelectionBoxText;
        XmNentryParent = wt_XmBulletinBoard;
        XmNdetail = wtXmSelectionBoxDetail;
    };
};
object wt_XmFileSelectionBox : XmIconGadget {
    arguments {
        XmNlabelString = wtXmFileSelectionBoxText;
        XmNentryParent = wt_XmSelectionBox;
        XmNdetail = wtXmFileSelectionBoxDetail;
    };
};
object wt_XmCommand : XmIconGadget {
    arguments {
        XmNlabelString = wtXmCommandText;
        XmNentryParent = wt_XmSelectionBox;
        XmNdetail = wtXmCommandDetail;
    };
};
object wt_Shell : XmIconGadget {
    arguments {
        XmNlabelString = wtShellText;
        XmNentryParent = wt_Composite;
        XmNdetail = wtShellDetail;
    };
};
object wt_WMShell : XmIconGadget {
    arguments {
        XmNlabelString = wtWMShellText;
        XmNentryParent = wt_Shell;
        XmNdetail = wtWMShellDetail;
    };
};
object wt_VendorShell : XmIconGadget {
    arguments {
        XmNlabelString = wtVendorShellText;
        XmNentryParent = wt_WMShell;
        XmNdetail = wtVendorShellDetail;
    };
};
object wt_XmGrabShell : XmIconGadget {
    arguments {
        XmNlabelString = wtXmGrabShellText;
        XmNentryParent = wt_VendorShell;
        XmNdetail = wtXmGrabShellDetail;
    };
};
object wt_XmDragOverShell : XmIconGadget {
    arguments {
        XmNlabelString = wtXmDragOverShellText;
        XmNentryParent = wt_VendorShell;
        XmNdetail = wtXmDragOverShellDetail;
    };
};
object wt_TransientShell : XmIconGadget {
    arguments {
        XmNlabelString = wtTransientShellText;
        XmNentryParent = wt_VendorShell;
        XmNdetail = wtTransientShellDetail;
    };
};
object wt_XmDialogShell : XmIconGadget {
    arguments {
        XmNlabelString = wtXmDialogShellText;
        XmNentryParent = wt_TransientShell;
        XmNdetail = wtXmDialogShellDetail;
    };
};
object wt_TopLevelShell : XmIconGadget {
    arguments {
        XmNlabelString = wtTopLevelShellText;
        XmNentryParent = wt_VendorShell;
        XmNdetail = wtTopLevelShellDetail;
    };
};
object wt_ApplicationShell : XmIconGadget {
    arguments {
        XmNlabelString = wtApplicationShellText;
        XmNentryParent = wt_TopLevelShell;
        XmNdetail = wtApplicationShellDetail;
    };
};
object wt_XmDisplay : XmIconGadget {
    arguments {
        XmNlabelString = wtXmDisplayText;
        XmNentryParent = wt_ApplicationShell;
        XmNdetail = wtXmDisplayDetail;
    };
};
object wt_OverrideShell : XmIconGadget {
    arguments {
        XmNlabelString = wtOverrideShellText;
        XmNentryParent = wt_Shell;
        XmNdetail = wtOverrideShellDetail;
    };
};
object wt_XmMenuShell : XmIconGadget {
    arguments {
        XmNlabelString = wtXmMenuShellText;
        XmNentryParent = wt_OverrideShell;
        XmNdetail = wtXmMenuShellDetail;
    };
};
object wt_XmScreen : XmIconGadget {
    arguments {
        XmNlabelString = wtXmScreenText;
        XmNentryParent = wt_Core;
        XmNdetail = wtXmScreenDetail;
    };
};
object wt_XmDragContext : XmIconGadget {
    arguments {
        XmNlabelString = wtXmDragContextText;
        XmNentryParent = wt_Core;
        XmNdetail = wtXmDragContextDetail;
    };
};
object wt_XmPrimitive : XmIconGadget {
    arguments {
        XmNlabelString = wtXmPrimitiveText;
        XmNentryParent = wt_Core;
        XmNdetail = wtXmPrimitiveDetail;
    };
};
object wt_XmScrollBar : XmIconGadget {
    arguments {
        XmNlabelString = wtXmScrollBarText;
        XmNentryParent = wt_XmPrimitive;
        XmNdetail = wtXmScrollBarDetail;
    };
};
object wt_XmArrowButton : XmIconGadget {
    arguments {
        XmNlabelString = wtXmArrowButtonText;
        XmNentryParent = wt_XmPrimitive;
        XmNdetail = wtXmArrowButtonDetail;
    };
};
object wt_XmList : XmIconGadget {
    arguments {
        XmNlabelString = wtXmListText;
        XmNentryParent = wt_XmPrimitive;
        XmNdetail = wtXmListDetail;
    };
};
object wt_XmSeparator : XmIconGadget {
    arguments {
        XmNlabelString = wtXmSeparatorText;
        XmNentryParent = wt_XmPrimitive;
        XmNdetail = wtXmSeparatorDetail;
    };
};
object wt_XmTextField : XmIconGadget {
    arguments {
        XmNlabelString = wtXmTextFieldText;
        XmNentryParent = wt_XmPrimitive;
        XmNdetail = wtXmTextFieldDetail;
    };
};
object wt_XmDrawnButton : XmIconGadget {
    arguments {
        XmNlabelString = wtXmDrawnButtonText;
        XmNentryParent = wt_XmPrimitive;
        XmNdetail = wtXmDrawnButtonDetail;
    };
};
object wt_XmText : XmIconGadget {
    arguments {
        XmNlabelString = wtXmTextText;
        XmNentryParent = wt_XmPrimitive;
        XmNdetail = wtXmTextDetail;
    };
};
object wt_XmSash : XmIconGadget {
    arguments {
        XmNlabelString = wtXmSashText;
        XmNentryParent = wt_XmPrimitive;
        XmNdetail = wtXmSashDetail;
    };
};
object wt_XmLabel : XmIconGadget {
    arguments {
        XmNlabelString = wtXmLabelText;
        XmNentryParent = wt_XmPrimitive;
        XmNdetail = wtXmLabelDetail;
    };
};
object wt_XmToggleButton : XmIconGadget {
    arguments {
        XmNlabelString = wtXmToggleButtonText;
        XmNentryParent = wt_XmLabel;
        XmNdetail = wtXmToggleButtonDetail;
    };
};
object wt_XmCascadeButton : XmIconGadget {
    arguments {
        XmNlabelString = wtXmCascadeButtonText;
        XmNentryParent = wt_XmLabel;
        XmNdetail = wtXmCascadeButtonDetail;
    };
};
object wt_XmPushButton : XmIconGadget {
    arguments {
        XmNlabelString = wtXmPushButtonText;
        XmNentryParent = wt_XmLabel;
        XmNdetail = wtXmPushButtonDetail;
    };
};
object wt_XmTearOffButton : XmIconGadget {
    arguments {
        XmNlabelString = wtXmTearOffButtonText;
        XmNentryParent = wt_XmPushButton;
        XmNdetail = wtXmTearOffButtonDetail;
    };
};
object wt_XmGadget : XmIconGadget {
    arguments {
        XmNlabelString = wtXmGadgetText;
        XmNentryParent = wt_Rect;
        XmNdetail = wtXmGadgetDetail;
    };
};
object wt_XmArrowButtonGadget : XmIconGadget {
    arguments {
        XmNlabelString = wtXmArrowButtonGadgetText;
        XmNentryParent = wt_XmGadget;
        XmNdetail = wtXmArrowButtonGadgetDetail;
    };
};
object wt_XmSeparatorGadget : XmIconGadget {
    arguments {
        XmNlabelString = wtXmSeparatorGadgetText;
        XmNentryParent = wt_XmGadget;
        XmNdetail = wtXmSeparatorGadgetDetail;
    };
};
object wt_XmLabelGadget : XmIconGadget {
    arguments {
        XmNlabelString = wtXmLabelGadgetText;
        XmNentryParent = wt_XmGadget;
        XmNdetail = wtXmLabelGadgetDetail;
    };
};
object wt_XmPushButtonGadget : XmIconGadget {
    arguments {
        XmNlabelString = wtXmPushButtonGadgetText;
        XmNentryParent = wt_XmLabelGadget;
        XmNdetail = wtXmPushButtonGadgetDetail;
    };
};
object wt_XmToggleButtongadget : XmIconGadget {
    arguments {
        XmNlabelString = wtXmToggleButtongadgetText;
        XmNentryParent = wt_XmLabelGadget;
        XmNdetail = wtXmToggleButtongadgetDetail;
    };
};
object wt_XmCascadeButtonGadget : XmIconGadget {
    arguments {
        XmNlabelString = wtXmCascadeButtonGadgetText;
        XmNentryParent = wt_XmLabelGadget;
        XmNdetail = wtXmCascadeButtonGadgetDetail;
    };
};
object wt_XmIconGadget : XmIconGadget {
    arguments {
        XmNlabelString = wtXmIconGadgetText;
        XmNentryParent = wt_XmGadget;
        XmNdetail = wtXmIconGadgetDetail;
    };
};
object wt_XmIconHeader : XmIconGadget {
    arguments {
        XmNlabelString = wtXmIconHeaderText;
        XmNentryParent = wt_XmIconGadget;
        XmNdetail = wtXmIconHeaderDetail;
    };
};
object wt_XmDragIcon : XmIconGadget {
    arguments {
        XmNlabelString = wtXmDragIconText;
        XmNentryParent = wt_Object;
        XmNdetail = wtXmDragIconDetail;
    };
};
object wt_XmDropTransfer : XmIconGadget {
    arguments {
        XmNlabelString = wtXmDropTransferText;
        XmNentryParent = wt_Object;
        XmNdetail = wtXmDropTransferDetail;
    };
};
object wt_XmDropSiteManager : XmIconGadget {
    arguments {
        XmNlabelString = wtXmDropSiteManagerText;
        XmNentryParent = wt_Object;
        XmNdetail = wtXmDropSiteManagerDetail;
    };
};

!
! Dialog widgets
!

object templateDialog : XmTemplateDialog{
    arguments {
	XmNokLabelString = templateOkText;
	XmNcancelLabelString = templateCancelText;
	XmNdialogTitle = templateTitleText;
	XmNautoUnmanage = false;
    };
    controls {
	XmMenuBar templateMenuBar;
	XmScrolledText { arguments {
	    XmNeditMode = XmMULTI_LINE_EDIT;
	    XmNrows = 10;
	};};
	XmPushButton { arguments { XmNlabelString = templateIncludeText; }; };
	XmPushButton { arguments { XmNlabelString = templateDraftText; }; };
	XmPushButton { arguments { XmNlabelString = templateSpellText; }; };
    };
    callbacks {
	XmNcancelCallback = procedure UnmanageCb("*templateDialog");
    };
};

object templateMenuBar : XmMenuBar {
    arguments { };
    controls { XmCascadeButton templateFileCascade; };
};

object templateFileCascade : XmCascadeButton {
    arguments {
	XmNlabelString = templateCascadeText;
	XmNmnemonic = keysym(templateCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton sendButton;
	    XmPushButton includeButton;
	    XmPushButton draftButton;
	    XmPushButton spellButton;
	    XmPushButton cancelButton;
	}; };
    };
};

object sendButton : XmPushButton {
    arguments {
	XmNlabelString = templateOkText;
	XmNmnemonic = keysym(templateOkMnem);
    };
};
object includeButton : XmPushButton {
    arguments {
	XmNlabelString = templateIncludeText;
	XmNmnemonic = keysym(templateIncludeMnem);
    };
};
object draftButton : XmPushButton {
    arguments {
	XmNlabelString = templateDraftText;
	XmNmnemonic = keysym(templateDraftMnem);
    };
};
object spellButton : XmPushButton {
    arguments {
	XmNlabelString = templateSpellText;
	XmNmnemonic = keysym(templateSpellMnem);
    };
};
object cancelButton : XmPushButton {
    arguments {
	XmNlabelString = templateCancelText;
	XmNmnemonic = keysym(templateCancelMnem);
    };
    callbacks {
	XmNactivateCallback = procedure UnmanageCb("*templateDialog");
    };
};
object showDialog : XmInformationDialog {
    arguments {
	XmNdialogTitle = "Motif Release 2.1";
	XmNcancelLabelString = "Enjoy!";
	XmNmessageString =
		compound_string("Motif Release 2.1", separate = true) &
		compound_string("", separate = true) &
		compound_string("June 1994", separate = true) &
		compound_string("", separate = true) &
		compound_string("Dev: Vania, Ellis, Kamesh, Jim, Andrew, ") &
		compound_string("Daniel, David, Doug, Ingeborg, Scott, Steve")&
		compound_string("", separate = true) &
		compound_string("", separate = true) &
		compound_string("QA: Ramesh, Alka, Marianne, Pascale, ") &
		compound_string("Shobana, Ron, Yakov", separate = true) &
		compound_string("", separate = true) &
		compound_string("Doc: Ken, Barry, Bernice",separate = true) &
		compound_string("", separate = true) &
		compound_string("Rats: Marty",separate = true) &
		compound_string("", separate = true) &
		compound_string("Sys: Paul, Chauncy, Kevin, ") &
                compound_string("Weidong", separate = true) &
		compound_string("", separate = true) &
		compound_string("Ops: Cathy, Darrell", separate = true) &
		compound_string("", separate = true) &
		compound_string("Also starring: Beth, Lorraine", 
				separate = true) &
		compound_string("");
    };
    controls {
	Xm_OK unmanaged { };
	Xm_Help unmanaged { };
    };
};

object infoDialog : XmInformationDialog {
    arguments {
	XmNdialogTitle = informationTitleText;
	XmNmessageString = infoMessageText;
	XmNcancelLabelString = infoCancelText;
    };
    controls {
	Xm_OK unmanaged { };
	Xm_Help unmanaged { };
    };
};

object warningDialog : XmWarningDialog {
    arguments {
	XmNdialogTitle = warningTitleText;
	XmNmessageString = warningMessageText;
	XmNokLabelString = warningOkText;
	XmNcancelLabelString = warningCancelText;
    };
    controls {
	Xm_Help unmanaged { };
    };
};

object errorDialog : XmErrorDialog {
    arguments {
	XmNdialogTitle = errorTitleText;
	XmNmessageString = errorMessageText;
	XmNokLabelString = errorOkText;
	XmNcancelLabelString = errorCancelText;
    };
    controls {
	Xm_Help unmanaged { };
    };
};

object questionDialog : XmQuestionDialog {
    arguments {
	XmNdialogTitle = questionTitleText;
	XmNmessageString = questionMessageText;
	XmNokLabelString = questionYesText;
	XmNcancelLabelString = questionNoText;
    };
    controls {
	Xm_Help unmanaged { };
	XmPushButton { arguments { XmNlabelString = questionMaybeText; }; };
    };
};

object workingDialog : XmWorkingDialog {
    arguments {
	XmNcancelLabelString = workingCancelText;
	XmNdialogTitle = workingTitleText;
    };
    controls {
	Xm_OK unmanaged { };
	Xm_Help unmanaged { };
	Xm_Message unmanaged { };
	XmScale { arguments {
	    XmNorientation = XmHORIZONTAL;
	    XmNshowValue = true;
	    XmNtitleString = workingScaleText;
	}; };
    };
};

object fileDialog : XmFileSelectionDialog {
    arguments {
	XmNautoUnmanage = true;
	XmNdialogTitle = fileTitleText;
	XmNselectionLabelString = fileSelectText;
	XmNlistLabelString = fileListText;
	XmNdirListLabelString = fileDirListText;
	XmNfileListLabelString = fileFileListText;
	XmNfilterLabelString = fileFilterLabelText;
	XmNnoMatchString = fileNoMatchText;
	XmNokLabelString = fileLoadText;
	XmNapplyLabelString = fileFilterText;
	XmNcancelLabelString = fileCancelText;
	XmNlistVisibleItemCount = 6;
    };
    controls {
	Xm_Help unmanaged { };
	unmanaged XmSeparator { }; ! First, a dummy work area child
	XmMenuBar fileMenuBar;
	XmPushButton { arguments { XmNlabelString = fileMergeText; }; };
	XmPushButton { arguments { XmNlabelString = fileRemoveText; }; };
    };
};

object fileMenuBar : XmMenuBar {
    arguments { };
    controls { XmCascadeButton filterCascade; };
};

object filterCascade : XmCascadeButton {
    arguments {
	XmNlabelString = formatCascadeText;
	XmNmnemonic = keysym(formatCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton audioButton;
	    XmPushButton graphicsButton;
	    XmPushButton textButton;
	}; };
    };
};

object audioButton : XmPushButton {
    arguments {
	XmNlabelString = audioButtonText;
	XmNmnemonic = keysym(audioButtonMnem);
    };
};
object graphicsButton : XmPushButton {
    arguments {
	XmNlabelString = graphicsButtonText;
	XmNmnemonic = keysym(graphicsButtonMnem);
    };
};
object textButton : XmPushButton {
    arguments {
	XmNlabelString = textButtonText;
	XmNmnemonic = keysym(textButtonMnem);
    };
};

object selectDialog : XmSelectionDialog {
    arguments {
	XmNdialogTitle = selectTitleText;
	XmNlistItems = greekAlphabet;
	XmNlistVisibleItemCount = 6;

	XmNselectionLabelString = selectSelectionText;
	XmNlistLabelString = selectListText;
	XmNokLabelString = selectOkText;
	XmNapplyLabelString = selectApplyText;
	XmNcancelLabelString = selectCancelText;
    };
    controls {
	Xm_Help unmanaged { };
    };
};

object promptDialog : XmPromptDialog {
    arguments {
	XmNdialogTitle = promptTitleText;
	XmNselectionLabelString = promptMessageText;
	XmNokLabelString = promptOkText;
	XmNcancelLabelString = promptCancelText;
    };
    controls {
	Xm_Help unmanaged { };
    };
};


! Notebook Pages 3..10

! XmForm swaps left/right based on layout direction, but not top/bottom.
! We want the button layout to be constant, so the visual matches the
! documentation of XmNlayoutDirection.

list layoutLControls : controls {
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x4;
	XmNtopPosition = x0; XmNbottomPosition = x2;
	XmNlabelString = aText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x6;
	XmNtopPosition = x0; XmNbottomPosition = x2;
	XmNlabelString = bText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x2;
	XmNtopPosition = x2; XmNbottomPosition = x4;
	XmNlabelString = cText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x4;
	XmNtopPosition = x2; XmNbottomPosition = x4;
	XmNlabelString = dText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x6;
	XmNtopPosition = x2; XmNbottomPosition = x4;
	XmNlabelString = eText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x8;
	XmNtopPosition = x2; XmNbottomPosition = x4;
	XmNlabelString = fText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x2;
	XmNtopPosition = x4; XmNbottomPosition = x6;
	XmNlabelString = gText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x4;
	XmNtopPosition = x4; XmNbottomPosition = x6;
	XmNlabelString = hText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x6;
	XmNtopPosition = x4; XmNbottomPosition = x6;
	XmNlabelString = iText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x8;
	XmNtopPosition = x4; XmNbottomPosition = x6;
	XmNlabelString = jText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x4;
	XmNtopPosition = x6; XmNbottomPosition = x8;
	XmNlabelString = kText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x6;
	XmNtopPosition = x6; XmNbottomPosition = x8;
	XmNlabelString = lText;
    }; };
};

list layoutRControls : controls {
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x6;
	XmNtopPosition = x0; XmNbottomPosition = x2;
	XmNlabelString = aText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x4;
	XmNtopPosition = x0; XmNbottomPosition = x2;
	XmNlabelString = bText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x8;
	XmNtopPosition = x2; XmNbottomPosition = x4;
	XmNlabelString = cText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x6;
	XmNtopPosition = x2; XmNbottomPosition = x4;
	XmNlabelString = dText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x4;
	XmNtopPosition = x2; XmNbottomPosition = x4;
	XmNlabelString = eText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x2;
	XmNtopPosition = x2; XmNbottomPosition = x4;
	XmNlabelString = fText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x8;
	XmNtopPosition = x4; XmNbottomPosition = x6;
	XmNlabelString = gText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x6;
	XmNtopPosition = x4; XmNbottomPosition = x6;
	XmNlabelString = hText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x4;
	XmNtopPosition = x4; XmNbottomPosition = x6;
	XmNlabelString = iText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x2;
	XmNtopPosition = x4; XmNbottomPosition = x6;
	XmNlabelString = jText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x6;
	XmNtopPosition = x6; XmNbottomPosition = x8;
	XmNlabelString = kText;
    }; };
    XmPushButton { arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x4;
	XmNtopPosition = x6; XmNbottomPosition = x8;
	XmNlabelString = lText;
    }; };
};

object layoutLTForm : XmForm {
    arguments {  
	XmNpageNumber = 3;
	XmNfractionBase = 40;
	XmNlayoutDirection = XmLEFT_TO_RIGHT_TOP_TO_BOTTOM;
    };
    controls {  controls layoutLControls;  };
};

object layoutRTForm : XmForm {
    arguments {  
	XmNpageNumber = 4;
	XmNfractionBase = 40;
	XmNlayoutDirection = XmRIGHT_TO_LEFT_TOP_TO_BOTTOM;
    };
    controls {  controls layoutRControls;  };
};

object layoutTLForm : XmForm {
    arguments {  
	XmNpageNumber = 5;
	XmNfractionBase = 40;
	XmNlayoutDirection = XmTOP_TO_BOTTOM_LEFT_TO_RIGHT;
    };
    controls {  controls layoutLControls;  };
};

object layoutTRForm : XmForm {
    arguments {  
	XmNpageNumber = 6;
	XmNfractionBase = 40;
	XmNlayoutDirection = XmTOP_TO_BOTTOM_RIGHT_TO_LEFT;
    };
    controls {  controls layoutRControls;  };
};

object layoutBLForm : XmForm {
    arguments {  
	XmNpageNumber = 7;
	XmNfractionBase = 40;
	XmNlayoutDirection = XmBOTTOM_TO_TOP_LEFT_TO_RIGHT;
    };
    controls {  controls layoutLControls;  };
};

object layoutBRForm : XmForm {
    arguments {  
	XmNpageNumber = 8;
	XmNfractionBase = 40;
	XmNlayoutDirection = XmBOTTOM_TO_TOP_RIGHT_TO_LEFT;
    };
    controls {  controls layoutRControls;  };
};

object layoutLBForm : XmForm {
    arguments {  
	XmNpageNumber = 9;
	XmNfractionBase = 40;
	XmNlayoutDirection = XmLEFT_TO_RIGHT_BOTTOM_TO_TOP;
    };
    controls {  controls layoutLControls;  };
};

object layoutRBForm : XmForm {
    arguments {  
	XmNpageNumber = 10;
	XmNfractionBase = 40;
	XmNlayoutDirection = XmRIGHT_TO_LEFT_BOTTOM_TO_TOP;
    };
    controls {  controls layoutRControls;  };
};


! Notebook Page 11

object toggleButtonPage : XmForm {
    arguments {
	XmNpageNumber = 11;
	XmNfractionBase = 40;
    };
    controls {
	XmToggleButton toggleButtonExample;
	XmScrolledWindow toggleButtonControlWin;
    };
};

object toggleButtonExample : XmToggleButton {
    arguments {
	arguments formArgs;
      	XmNleftPosition = 10; 
      	XmNrightPosition = 30;
      	XmNtopPosition = 0; 
      	XmNbottomPosition = 10;
	
	XmNlabelString = toggleExampleText;
	XmNindicatorOn = XmINDICATOR_CHECK_BOX;
	XmNindicatorType = XmN_OF_MANY;
      	XmNindicatorSize = 20;
	XmNtoggleMode = XmTOGGLE_BOOLEAN;
	XmNvisibleWhenOff = true;
	XmNfillOnSelect = true;
	XmNset = XmSET;
	XmNselectColor = XmDEFAULT_SELECT_COLOR;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ToggleValueChangedCb();
    };
};

object toggleButtonControlWin : XmScrolledWindow {
    arguments {
	arguments formArgs;
      	XmNleftPosition = 0; 
	XmNleftOffset = 5;
      	XmNrightPosition = 40;
	XmNrightOffset = 5;
      	XmNtopPosition = 10; 
      	XmNbottomPosition = 40;
        XmNscrollBarDisplayPolicy = XmAS_NEEDED;
        XmNscrollingPolicy = XmAUTOMATIC;
    };
    callbacks {
	XmNtraverseObscuredCallback = procedure ScrollVisibleCb();
    };
    controls {
	XmRowColumn toggleButtonControls;
    };
};

object toggleButtonControls : XmRowColumn {
    arguments {
	XmNnumColumns = 2;
	XmNpacking = XmPACK_COLUMN;
	XmNentryAlignment = XmALIGNMENT_END;
    };
    controls {
      	XmLabel toggleIndOnLabel;
      	XmLabel toggleTogModeLabel;
      	XmLabel toggleSetLabel;
      	XmLabel toggleVizOffLabel;
      	XmLabel toggleFillLabel;
      	XmLabel toggleSelColorLabel;
      	XmLabel toggleUnselColorLabel;
      	XmLabel toggleIndTypeLabel;
      	XmLabel toggleIndSizeLabel;
      	XmComboBox toggleIndOnControl;
      	XmComboBox toggleTogModeControl;
      	XmComboBox toggleSetControl;
      	XmComboBox toggleVizOffControl;
      	XmComboBox toggleFillControl;
      	XmComboBox toggleSelColorControl;
      	XmComboBox toggleUnselColorControl;
      	XmComboBox toggleIndTypeControl;
      	XmComboBox toggleIndSizeControl;
    };
};

object toggleIndOnLabel : XmLabel {
    arguments {
      	XmNlabelString = toggleIndOnText;
    };
};
object toggleIndOnControl : XmComboBox {
    arguments {
	XmNpositionMode = XmONE_BASED;
	XmNarrowSize = 15;
      	XmNcomboBoxType = XmDROP_DOWN_LIST;
      	XmNselectedItem = toggleCheckBoxItem;
    };
    controls {
        Xm_List { 
            arguments {
              	XmNvisibleItemCount = 7;
              	XmNitems = toggleIndOnItems;
    }; }; };
    callbacks {
      XmNselectionCallback = procedure ToggleControlCb(1);
    };
};


object toggleIndTypeLabel : XmLabel {
    arguments {
      	XmNlabelString = toggleIndTypeText;
    };
};
object toggleIndTypeControl : XmComboBox {
    arguments {
	XmNpositionMode = XmONE_BASED;
	XmNarrowSize = 15;
      	XmNcomboBoxType = XmDROP_DOWN_LIST;
      	XmNselectedItem = toggleNofManyItem;
    };
    controls {
        Xm_List { 
	    arguments {
		XmNvisibleItemCount = 4;
		XmNitems = toggleIndTypeItems;
    }; }; };
    callbacks {
        XmNselectionCallback = procedure ToggleControlCb(2);
    };
};


object toggleIndSizeLabel : XmLabel {
    arguments {
      	XmNlabelString = toggleIndSizeText;
    };
};
object toggleIndSizeControl : XmComboBox {
    arguments {
	XmNpositionMode = XmONE_BASED;
	XmNarrowSize = 15;
      	XmNcomboBoxType = XmDROP_DOWN_LIST;
      	XmNselectedItem = toggle20Item;
    };
    controls {
        Xm_List { 
            arguments {
		XmNvisibleItemCount = 5;
		XmNitems = toggleIndSizeItems;
    }; }; };
    callbacks {
        XmNselectionCallback = procedure ToggleControlCb(3);
    };
};


object toggleTogModeLabel : XmLabel {
    arguments {
      	XmNlabelString = toggleTogModeText;
    };
};
object toggleTogModeControl : XmComboBox {
    arguments {
	XmNpositionMode = XmONE_BASED;
	XmNarrowSize = 15;
	XmNcomboBoxType = XmDROP_DOWN_LIST;
      	XmNselectedItem = toggleBooleanItem;
    };
    controls {
        Xm_List { 
            arguments {
		XmNvisibleItemCount = 2;
		XmNitems = toggleTogModeItems;
    }; }; };
    callbacks {
        XmNselectionCallback = procedure ToggleControlCb(4);
    };
};


object toggleVizOffLabel : XmLabel {
    arguments {
      	XmNlabelString = toggleVizOffText;
    };
};
object toggleVizOffControl : XmComboBox {
    arguments {
	XmNpositionMode = XmONE_BASED;
	XmNarrowSize = 15;
      	XmNcomboBoxType = XmDROP_DOWN_LIST;
      	XmNselectedItem = toggleOnItem;
    };
    controls {
        Xm_List { 
            arguments {
		XmNvisibleItemCount = 2;
		XmNitems = toggleVizOffItems;
    }; }; };
    callbacks {
        XmNselectionCallback = procedure ToggleControlCb(8);
    };
};


object toggleSelColorLabel : XmLabel {
    arguments {
      	XmNlabelString = toggleSelColorText;
    };
};
object toggleSelColorControl : XmComboBox {
    arguments {
	XmNpositionMode = XmONE_BASED;
	XmNarrowSize = 15;
      	XmNcomboBoxType = XmDROP_DOWN_COMBO_BOX;
      	XmNselectedItem = toggleDefaultSelectItem;
    };
    controls {
        Xm_List { 
            arguments {
		XmNvisibleItemCount = 3;
		XmNitems = toggleSelColorItems;
    }; }; };
    callbacks {
        XmNselectionCallback = procedure ToggleControlCb(6);
    };
};


object toggleUnselColorLabel : XmLabel {
    arguments {
      	XmNlabelString = toggleUnselColorText;
    };
};
object toggleUnselColorControl : XmComboBox {
    arguments {
	XmNpositionMode = XmONE_BASED;
	XmNarrowSize = 15;
      	XmNcomboBoxType = XmDROP_DOWN_COMBO_BOX;
      	XmNselectedItem = toggleBackgroundItem;
    };
    controls {
        Xm_List { 
            arguments {
		XmNvisibleItemCount = 1;
		XmNitems = toggleUnselColorItems;
    }; }; };
    callbacks {
        XmNselectionCallback = procedure ToggleControlCb(9);
    };
};


object toggleFillLabel : XmLabel {
    arguments {
      	XmNlabelString = toggleFillText;
    };
};
object toggleFillControl : XmComboBox {
    arguments {
	XmNpositionMode = XmONE_BASED;
	XmNarrowSize = 15;
      	XmNcomboBoxType = XmDROP_DOWN_LIST;
      	XmNselectedItem = toggleOnItem;
    };
    controls {
        Xm_List { 
            arguments {
		XmNvisibleItemCount = 2;
		XmNitems = toggleFillItems;
    }; }; };
    callbacks {
        XmNselectionCallback = procedure ToggleControlCb(7);
    };
};


object toggleSetLabel : XmLabel {
    arguments {
      	XmNlabelString = toggleSetText;
    };
};
object toggleSetControl : XmComboBox {
    arguments {
	XmNpositionMode = XmONE_BASED;
	XmNarrowSize = 15;
      	XmNcomboBoxType = XmDROP_DOWN_LIST;
      	XmNselectedItem = toggleSetItem;
    };
    controls {
        Xm_List { 
            arguments {
		XmNvisibleItemCount = 3;
		XmNitems = toggleSetItems;
    }; }; };
    callbacks {
        XmNselectionCallback = procedure ToggleControlCb(5);
    };
};

end module;
