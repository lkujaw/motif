XCOMM platform:  $XFree86: xc/config/cf/darwin.cf,v 1.21.2.1 2002/05/03 00:36:17 torrey Exp $

/* Darwin / Mac OS X configuration by John Carmack <johnc@idsoftware.com> */

/* imake determines the default values by parsing uname */

#ifndef OSName
#define OSName                  DefaultOSName
#endif
#ifndef OSVendor
#define OSVendor                Apple Computer, Inc.
#endif
#ifndef OSMajorVersion
#define OSMajorVersion          DefaultOSMajorVersion
#endif
#ifndef OSMinorVersion
#define OSMinorVersion          DefaultOSMinorVersion
#endif
#ifndef OSTeenyVersion
#define OSTeenyVersion          DefaultOSTeenyVersion
#endif


XCOMM operating system:  OSName (OSMajorVersion./**/OSMinorVersion./**/OSTeenyVersion)

#define VarDirectory ProjectRoot/lib

/*
 * Define the operating system's capabilities
 */
#define HasSnprintf             YES
#define HasPutenv               YES
#define HasBSD44Sockets         YES
#define HasUsableFileMmap       YES
#define HasZlib                 YES
#ifndef HasShm
# define HasShm                 YES
#endif
#define HasNdbm                 YES

#ifndef HasGroff
# define HasGroff               YES
#endif

/* Libtool on Darwin always uses minor numbers */
#define LibtoolMinorVersions    YES

/* The most common file system, HFS+, is not case sensitive. */
#ifndef CaseSensitiveFileSystem
# define CaseSensitiveFileSystem NO
#endif

/*
 * This enables some settings for developers.
 */
#ifndef XFree86Devel
# define XFree86Devel           NO
#endif

/*
 * This enables Quartz compatibility.
 * Turn off to build on raw Darwin systems.
 */
#ifndef DarwinQuartzSupport
# define DarwinQuartzSupport    YES
#endif

/* we don't need -lm */
#define MathLibrary             /**/

#define TermcapLibrary          -lcurses

/* we don't have a dbm library */
#define DBMLibrary              /**/

#define MkdirHierCmd            mkdir -p

/* Our cpp isn't in /lib/cpp and it doesn't like -undef. */
#define CppCmd                  /usr/bin/cpp
#define RawCppCmd               CppCmd

/* we have a gcc compatible compiler, but its not called gcc */
#ifndef CcCmd
#define CcCmd                   /usr/bin/cc
#endif
#ifndef CplusplusCmd
#define CplusplusCmd            /usr/bin/c++
#endif

/* default flags to pass to cc */
#ifndef DefaultCCOptions
#if XFree86Devel
# define DefaultCCOptions       -Wall -Wpointer-arith -Wstrict-prototypes \
                                -Wmissing-prototypes -Wmissing-declarations \
                                -Wredundant-decls -Wnested-externs \
                                -no-cpp-precomp
#else
# define DefaultCCOptions       -Wall -Wpointer-arith -no-cpp-precomp
#endif
#endif

/* flags to pass to cc when building libraries */
#ifndef LibraryCCOptions
# define LibraryCCOptions       DefaultCCOptions -fno-common
#endif

#ifdef PpcDarwinArchitecture
# define DarwinMachineDefines   -D__powerpc__
# if HasGcc3
#  define OptimizedCDebugFlags  -Os
# else
#  define OptimizedCDebugFlags  -O2
# endif
# define ByteOrder              X_BIG_ENDIAN
#endif /* PpcDarwinArchitecture */

#ifdef i386DarwinArchitecture
# define DarwinMachineDefines   -D__i386__
# if HasGcc3
#  define OptimizedCDebugFlags  -Os
# else
#  define OptimizedCDebugFlags  -O2 -fno-strength-reduce
# endif
# define ByteOrder              X_LITTLE_ENDIAN
#endif /* i386DarwinArchitecture */


#ifdef x86_64DarwinArchitecture
# define DarwinMachineDefines   -D__x86_64__
# if HasGcc3
#  define OptimizedCDebugFlags  -Os
# else
#  define OptimizedCDebugFlags  -O2 -fno-strength-reduce
# endif
# define ByteOrder              X_LITTLE_ENDIAN
#endif /* x86_64DarwinArchitecture */



#if OSMajorVersion < 7
# define Jaguar 1
# define NoLocalWchar
# define NoLocalLangInfo
# define DarwinLocaleDefines    -DX_LOCALE
#else
# define DarwinLocaleDefines    /**/
#endif

/*
 * __DARWIN__ will be used for platform specific #ifdefs that can't
 * be handled by existing X defines.
 *
 * Darwin's alloca() seg faults (rather than returning NULL) on failed
 * allocations, so we can't use it.
 */
#define StandardDefines         DarwinMachineDefines -D__DARWIN__ \
                                -DNO_ALLOCA -DCSRG_BASED DarwinLocaleDefines

/*
 * Set this to NO to just build the client libs, which should work without
 * having to write any platform specific code.
 */
#ifndef BuildServer
#define BuildServer             YES

/* our custom X server */
# define XDarwinServer          NO
# define XAppleServer           YES
#endif

/* Thanks to the IOKit, the X server does not have to be SetUID. */
#ifndef InstallXserverSetUID
# define InstallXserverSetUID   NO
#endif

/* no direct graphics extension */
#define BuildXF86DGA            NO

/* Support for tablets and other non-standard input devices */
#ifndef BuildXInputExt
#define BuildXInputExt          YES
#endif
#define BuildXInputLib          YES

/* no Display Power Management extension */
#define BuildDPMSExt            NO

#define BuildLibPathVar         DYLD_LIBRARY_PATH

/* include rules to build shared libraries */
#include <darwinLib.rules>

/*
 * Darwin specific Imake Config files
 */
#ifndef LocalConfigFiles
#define LocalConfigFiles \
	darwinLib.rules \
	darwinLib.tmpl
#endif

/* include all the XFree86 rules */
#include <xfree86.cf>


#ifdef NoLocalWchar
WCHARLIB=${TOP}/extras/wchar/lib/libwcs.a
WCHARINCL=-I${TOP}/extras/wchar/h
#endif


/* ..and fix some stuff up */
#if XAppleServer

# undef GlxCoreLibDefines
# define GlxCoreLibDefines -DGLX_USE_APPLEGL

# undef GlxExtraDefines
# define GlxExtraDefines -DGLX_DIRECT_RENDERING DRIDefines GlxCoreLibDefines GlxArchDefines

# undef ServerExtraDefines
# define ServerExtraDefines XFree86ServerDefines -UX_BYTE_ORDER -DROOTLESS -DDDXTIME

/* Also, Imakefiles use XPLUGIN_INCLUDE for include flags */
XPLUGIN_LIB = $(XPLUGIN_LIBDIR) -lXplugin

EXTRA_FREETYPE2_REQUIREDLIBS = -framework CoreServices \
	-framework ApplicationServices

#endif /* XAppleServer */
